@* @model IEnumerable<Product> *@
 @using X.PagedList.Mvc.Core
@using X.PagedList

@model IPagedList<Product>
@{
    ViewData["Title"] = "Shop";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section breadcrumb {
    <section class="breadcrumb-section set-bg" data-setbg="/customerThienAn/img/breadcrumb.jpg">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                    <div class="breadcrumb__text">
                        <h2>Thien An Shop</h2>
                        <div class="breadcrumb__option">
                            <a asp-action="Index" asp-controller="Home">Trang chủ</a>
                            <span>Shop</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}
<!-- Product Section Begin -->
<section class="product spad">
    <div class="container">
        <div class="row">
            <div class="col-lg-3 col-md-5">
                <div class="sidebar">
                    <div class="sidebar__item">
                        <h4>Danh mục sản phẩm</h4>
                        <li class="list-unstyled font-weight-bold pb-3 pl-3">
                            <a asp-action="index" class="text-info">Tất cả sản phẩm</a>
                        </li>
                        @* Hiển thị category *@
                        @await Component.InvokeAsync("CategoryHero")
                    </div>

                    @* Lọc giá *@
                    <div class="sidebar__item">
                        <h4>Giá</h4>
                        <div class="price-range-wrap">
                            <div class="price-range ui-slider ui-corner-all ui-slider-horizontal ui-widget ui-widget-content"
                                 data-min="1000000" data-max="30000000">
                                <div class="ui-slider-range ui-corner-all ui-widget-header"></div>
                                <span tabindex="0" class="ui-slider-handle ui-corner-all ui-state-default"></span>
                                <span tabindex="0" class="ui-slider-handle ui-corner-all ui-state-default"></span>
                            </div>

                            <div class="range-slider">
                                <div class="price-input d-flex justify-content-between">
                                    <input type="text" id="minamount" readonly>
                                    <input type="text" id="maxamount" readonly>
                                </div>
                            </div>
                        </div>
                    </div>

                    @* Lọc màu sắc *@
                    <div class="sidebar__item sidebar__item__color--option">
                        <h4>Màu sắc</h4>
                        <form method="get" id="colorFilterForm">
                            <div class="sidebar__item__color sidebar__item__color--white">
                                <label for="white">
                                    <input type="radio" name="color" value="Trắng" id="white"
                                           onchange="submitColorFilter()"
                                    @(ViewBag.SelectedColor == "Trắng" ? "checked" : "")>
                                    Trắng
                                </label>
                            </div>

                            <div class="sidebar__item__color sidebar__item__color--brown">
                                <label for="brown">
                                    <input type="radio" name="color" value="Nâu" id="brown"
                                           onchange="submitColorFilter()"
                                    @(ViewBag.SelectedColor == "Nâu" ? "checked" : "")>
                                    Nâu
                                </label>
                            </div>

                            <div class="sidebar__item__color sidebar__item__color--black">
                                <label for="black">
                                    <input type="radio" name="color" value="Đen" id="black"
                                           onchange="submitColorFilter()"
                                    @(ViewBag.SelectedColor == "Đen" ? "checked" : "")>
                                    Đen
                                </label>
                            </div>
                        </form>
                    </div>

                </div>
            </div>
            <div class="col-lg-9 col-md-7">
                <div class="filter__item">
                    <div class="row">
                        <div class="col-lg-4 col-md-5">
                            @* Sort theo combobox *@
                            <div class="filter__sort">
                                <select id="sortOrder" onchange="changeSortOrder()">
                                    <option value="" selected="@((ViewBag.SortOrder == null) ? true : "")">Sản phẩm mới nhất</option>

                                    <option value="price_desc"
                                            selected="@((ViewBag.SortOrder == "price_desc") ? true : false)">Giá giảm dần</option>

                                    <option value="price_asc"
                                            selected="@((ViewBag.SortOrder == "price_asc") ? true : false)">Giá tăng dần</option>

                                    <option value="name_asc"
                                            selected="@((ViewBag.SortOrder == "price_asc") ? true : false)">A-Z</option>

                                    <option value="name_desc"
                                            selected="@((ViewBag.SortOrder == "price_asc") ? true : false)">Z-A</option>
                                </select>
                            </div>

                        </div>

                        <div class="col-lg-4 col-md-4">
                            <div class="filter__found">
                                <h6><span>@ViewBag.Count</span> Sản phẩm</h6>
                            </div>
                        </div>

                        <div class="col-lg-4 col-md-3">
                            <div class="filter__option">
                                <span class="icon_grid-2x2"></span>
                                <span class="icon_ul"></span>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="row">
                    @foreach (var product in Model)
                    {
                        <div class="col-lg-4 col-md-6 col-sm-6">
                            <div class="product__item">
                                <div class="product__item__pic set-bg" data-setbg="/adminThienAn/image_product/@product.MainImg">
                                    <ul class="product__item__pic__hover">
                                        @*                                    <li><a href="#"><i class="fa fa-heart"></i></a></li>
                                    <li><a href="#"><i class="fa fa-retweet"></i></a></li> *@
                                        <li><a href="#" class="add-to-cart" data-id="@product.Id"><i class="fa fa-shopping-cart"></i></a></li>
                                    </ul>
                                </div>
                                <div class="product__item__text">
                                    <h6><a asp-action="Detail" asp-route-id="@product.Id">@product.Name</a></h6>
                                    <h5>@($"{product.Price:N0}đ")</h5>
                                </div>
                            </div>
                        </div>
                    }

                </div>
                @* Pagination *@
                @* <div class="product__pagination"> *@
                @*     @Html.PagedListPager(Model, page => Url.Action("Index", new { page }), *@
                @*              new PagedListRenderOptions *@
                @*     { *@
                @*         LinkToPreviousPageFormat = "<i class='fa fa-long-arrow-left'></i>", *@
                @*         LinkToNextPageFormat = "<i class='fa fa-long-arrow-right'></i>", *@
                @*         MaximumPageNumbersToDisplay = 3, *@
                @*         DisplayLinkToFirstPage = PagedListDisplayMode.Never, *@
                @*         DisplayLinkToLastPage = PagedListDisplayMode.Never, *@
                @*         DisplayLinkToPreviousPage = PagedListDisplayMode.Always, *@
                @*         DisplayLinkToNextPage = PagedListDisplayMode.Always, *@
                @*         Display = PagedListDisplayMode.IfNeeded, *@
                @*         DisplayEllipsesWhenNotShowingAllPageNumbers = false, *@
                @*         LinkToIndividualPageFormat = "{0}", *@

                @*         // Add CSS classes for <li> and <a> *@
                @*         LiElementClasses = new[] { "product__pagination__item" }, *@
                @*         PageClasses = new[] { "product__pagination__item" }, *@
                @*         ActiveLiElementClass = "active", *@

                @*         // Force the current page to use <a> tag *@
                @*         FunctionToTransformEachPageLink = (liTag, aTag) => *@
                @*         { *@
                @*             if (liTag.Attributes.ContainsKey("class") && liTag.Attributes["class"]?.Contains("active") == true) *@
                @*             { *@
                @*                 aTag.AddCssClass("active"); *@
                @*             } *@
                @*             return aTag; *@
                @*         } *@
                @*     }) *@
                @* </div> *@

                <div class="product__pagination d-flex justify-content-center align-items-center">
                    @if (Model.HasPreviousPage)
                    {
                        <a href="@Url.Action("Index", new { page = Model.PageNumber - 1 })" class="product__pagination__item">
                            <i class="fa fa-long-arrow-left"></i>
                        </a>
                    }

                    @for (var i = 1; i <= Model.PageCount; i++)
                    {
                        if (i == Model.PageNumber)
                        {
                            <!-- Đánh dấu trạng thái active -->
                            <a href="@Url.Action("Index", new { page = i })" class="product__pagination__item active">@i</a>
                        }
                        else
                        {
                            <a href="@Url.Action("Index", new { page = i })" class="product__pagination__item">@i</a>
                        }
                    }

                    @if (Model.HasNextPage)
                    {
                        <a href="@Url.Action("Index", new { page = Model.PageNumber + 1 })" class="product__pagination__item">
                            <i class="fa fa-long-arrow-right"></i>
                        </a>
                    }
                </div>



                @*      <div class="product__pagination">
                <a href="#">1</a>
                <a href="#">2</a>
                <a href="#">3</a>
                <a href="#"><i class="fa fa-long-arrow-right"></i></a>
                </div> *@
            </div>
        </div>
    </div>
</section>
<!-- Product Section End -->
@section Scripts {
    <script>
        function changeSortOrder() {
            const sortOrder = document.getElementById('sortOrder').value;

            // Đưa url hiện tại thành đối tượng URL cho dễ thao tác
            const currentUrl = new URL(window.location.href);

            // Cập nhật tham số
            currentUrl.searchParams.set('sortOrder', sortOrder);

            // Chuyển hướng tới URL mới
            window.location.href = currentUrl.toString();
        }

        // Price slider - Trượt giá từ 1 triệu đến 20 triệu
        let debounceTimer;

        $(function () {
            let minPrice = @ViewBag.MinPrice;
            let maxPrice = @ViewBag.MaxPrice;

            $(".price-range").slider({
                range: true,
                min: 1000000,
                max: 20000000,
                step: 100000, // Bước nhảy 100k
                values: [minPrice, maxPrice],
                slide: function (event, ui) {
                    $("#minamount").val(ui.values[0].toLocaleString("vi-VN") + "đ");
                    $("#maxamount").val(ui.values[1].toLocaleString("vi-VN") + "đ");

                    // Gửi AJAX với debounce để tránh spam request
                    clearTimeout(debounceTimer);
                    debounceTimer = setTimeout(() => {
                        updatePriceFilter(ui.values[0], ui.values[1]);
                    }, 300);
                }
            });

            // Hiển thị giá trị mặc định
            $("#minamount").val($(".price-range").slider("values", 0).toLocaleString("vi-VN") + "đ");
            $("#maxamount").val($(".price-range").slider("values", 1).toLocaleString("vi-VN") + "đ");

            // Hàm cập nhật URL khi lọc giá
            function updatePriceFilter(minPrice, maxPrice) {
                const currentUrl = new URL(window.location.href);

                // Cập nhật hoặc thêm tham số minPrice và maxPrice
                currentUrl.searchParams.set('minPrice', minPrice);
                currentUrl.searchParams.set('maxPrice', maxPrice);

                // Chuyển hướng tới URL mới
                window.location.href = currentUrl.toString();
            }
        });

        // Cập nhật giá trị slider khi load lại trang
        $(function () {
            let minPrice = @ViewBag.MinPrice;
            let maxPrice = @ViewBag.MaxPrice;

            $(".price-range").slider("values", [minPrice, maxPrice]);
            $("#minamount").val(minPrice.toLocaleString("vi-VN") + "đ");
            $("#maxamount").val(maxPrice.toLocaleString("vi-VN") + "đ");
        });

        // Màu sắc
        function submitColorFilter() {
            const form = document.getElementById("colorFilterForm");
            const currentUrl = new URL(window.location.href);
            const selectedColor = form.querySelector('input[name="color"]:checked').value;

            // Giữ lại tất cả tham số hiện tại, chỉ thêm color
            currentUrl.searchParams.set('color', selectedColor);
            window.location.href = currentUrl.toString();
        }
    </script>

}